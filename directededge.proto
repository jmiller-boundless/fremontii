syntax = "proto3";
package directededge;

message DirectedEdge {
    uint64 endnode = 1;                 // Offset to edge data.
    uint64 accessrestriction = 2;       // General restriction or access
    uint64 startrestriction = 3;        // Complex restriction (per mode) starts on this directed edge
    uint64 endrestriction = 4;          // Complex restriction (per mode) ends on this directed edge
    uint64 exitsign = 5;                // Exit signs exist for this edge
    uint64 forward = 6;                // Is the edge info forward or reverse 
    uint64 driveonright = 7;            // Driving side. Right if true (false=left)
    uint64 speed = 8;                   // Speed (kph)
    uint64 truckspeed = 9;              // Truck speed (kph)
    uint64 restrictions = 10;           // Restrictions - mask of local edge indexes at the end node that are restricted.
    uint64 lanecount = 11;              // Number of lanes
    uint64 bikenetwork = 12;            // Edge that is part of a bicycle network
    uint64 use = 13;                    // Specific use types
    uint64 speedtype = 14;              // Speed type (tagged vs. categorized)
    uint64 oppindex = 15;               // Opposing directed edge index
    uint64 link = 16;                   // *link tag - Ramp or turn channel
    uint64 internal = 17;                    // Edge that is internal to an intersection
    uint64 deadend = 18;                     // A dead-end (no other driveable roads)
    uint64 toll = 19;                        // Edge is part of a toll road.
    uint64 seasonal = 20;                    // Seasonal access (ex. no access in winter)
    uint64 dest_only = 21;                   // Access allowed to destination only
                                             //  (private or no through traffic)
    uint64 tunnel = 22;                      // Is this edge part of a tunnel
    uint64 bridge = 23;                      // Is this edge part of a bridge?
    uint64 roundabout = 24;                  // Edge is part of a roundabout
    uint64 unreachable = 25;                 // Edge that is unreachable by driving
    uint64 traffic_signal = 26;              // Traffic signal at end of the directed edge
    uint64 not_thru = 27;                    // Edge leads to "no-through" region
    uint64 cycle_lane = 28;                  // Does this edge have bicycle lanes?
    uint64 truck_route = 29;                 // Edge that is part of a truck route/network
    uint64 ctry_crossing = 30;               // Does the edge cross into new country
    uint64 part_of_complex_restriction = 31; // Edge is part of a complex restriction


    uint64 forwardaccess = 32; // Access (bit mask) in forward direction
    uint64 reverseaccess = 33; // Access (bit mask) in reverse direction
    uint64 classification = 34; // Classification/importance of the road/path
    uint64 surface = 35;        // representation of smoothness
    uint64 shoulder = 36;       // Does the edge have a shoulder?
    uint64 spare2 = 37;
    uint64 use_sidepath = 38; // Is there a cycling path to the side that should be preferred?
    uint64 dismount = 39;     // Do you need to dismount when biking on this edge?
    uint64 density = 40;      // Density along the edge
    uint64 speed_limit = 41;  // Speed limit (kph)
    uint64 named = 42;        // 1 if this edge has names, 0 if unnamed
    uint64 lane_conn = 43;    // 1 if has lane connectivity, 0 otherwise
    uint64 traffic_seg = 44;  // 1 if has a traffic segment, 0 otherwise
    uint64 sac_scale = 45;    // Is this edge for hiking and if so how difficult is the hike?
    uint64 spare = 46;

    // Geometric attributes: length, weighted grade, curvature factor.
    // Turn types between edges.
    uint64 turntype = 47;      // Turn type (see graphconstants.h)
    uint64 edge_to_left = 48;   // Is there an edge to the left (between
                                // the "from edge" and this edge)
    uint64 length = 49;        // Length in meters
    uint64 weighted_grade = 50; // Weighted estimate of grade
    uint64 curvature = 51;      // Curvature factor
    uint32 sidewalk_left = 52;  // Sidewalk to the left of the edge
    uint32 sidewalk_right = 153; // Sidewalk to the right of the edge

}